OBJECT Table 1206 Credit Transfer Entry
{
  OBJECT-PROPERTIES
  {
    Date=02/12/13;
    Time=12:00:00;
    Version List=NAVW17.10.00.35800;
  }
  PROPERTIES
  {
    DataCaptionFields=Account Type,Account No.,Transaction ID;
    CaptionML=[ENU=Credit Transfer Entry;
               FRA=êcriture virement];
    LookupPageID=Page1206;
    DrillDownPageID=Page1206;
  }
  FIELDS
  {
    { 1   ;   ;Credit Transfer Register No.;Integer;
                                                   TableRelation="Credit Transfer Register";
                                                   CaptionML=[ENU=Credit Transfer Register No.;
                                                              FRA=N¯ registre virement] }
    { 2   ;   ;Entry No.           ;Integer       ;CaptionML=[ENU=Entry No.;
                                                              FRA=N¯ sÇquence] }
    { 3   ;   ;Account Type        ;Option        ;CaptionML=[ENU=Account Type;
                                                              FRA=Type compte];
                                                   OptionCaptionML=[ENU=Customer,Vendor;
                                                                    FRA=Client,Fournisseur];
                                                   OptionString=Customer,Vendor }
    { 4   ;   ;Account No.         ;Code20        ;TableRelation=IF (Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Account Type=CONST(Vendor)) Vendor;
                                                   CaptionML=[ENU=Account No.;
                                                              FRA=N¯ compte] }
    { 5   ;   ;Applies-to Entry No.;Integer       ;TableRelation=IF (Account Type=CONST(Customer)) "Cust. Ledger Entry"
                                                                 ELSE IF (Account Type=CONST(Vendor)) "Vendor Ledger Entry";
                                                   CaptionML=[ENU=Applies-to Entry No.;
                                                              FRA=N¯ sÇquence lettrage] }
    { 6   ;   ;Transfer Date       ;Date          ;CaptionML=[ENU=Transfer Date;
                                                              FRA=Date transfert] }
    { 7   ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Currency Code;
                                                              FRA=Code devise] }
    { 8   ;   ;Transfer Amount     ;Decimal       ;CaptionML=[ENU=Transfer Amount;
                                                              FRA=Montant transfert] }
    { 9   ;   ;Transaction ID      ;Text35        ;CaptionML=[ENU=Transaction ID;
                                                              FRA=ID transaction] }
  }
  KEYS
  {
    {    ;Credit Transfer Register No.,Entry No.  ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      CustLedgerEntry@1000 : Record 21;
      VendLedgerEntry@1001 : Record 25;

    PROCEDURE CreateNew@3(RegisterNo@1000 : Integer;EntryNo@1007 : Integer;GenJnlAccountType@1008 : Option;AccountNo@1001 : Code[20];LedgerEntryNo@1002 : Integer;TransferDate@1003 : Date;CurrencyCode@1004 : Code[10];TransferAmount@1005 : Decimal;TransActionID@1006 : Text[35]);
    VAR
      GenJnlLine@1009 : Record 81;
    BEGIN
      "Credit Transfer Register No." := RegisterNo;
      IF EntryNo = 0 THEN BEGIN
        SETRANGE("Credit Transfer Register No.",RegisterNo);
        LOCKTABLE;
        IF FINDLAST THEN;
        "Entry No." += 1;
      END ELSE
        "Entry No." := EntryNo;
      INIT;
      GenJnlLine.INIT;
      CASE GenJnlAccountType OF
        GenJnlLine."Account Type"::Customer:
          "Account Type" := "Account Type"::Customer;
        GenJnlLine."Account Type"::Vendor:
          "Account Type" := "Account Type"::Vendor;
      END;
      "Account No." := AccountNo;
      "Applies-to Entry No." := LedgerEntryNo;
      "Transfer Date" := TransferDate;
      "Currency Code" := CurrencyCode;
      "Transfer Amount" := TransferAmount;
      "Transaction ID" := TransActionID;
      INSERT;
    END;

    PROCEDURE CreditorName@1() : Text;
    VAR
      Customer@1000 : Record 18;
      Vendor@1001 : Record 23;
    BEGIN
      IF "Account No." = '' THEN
        EXIT('');
      CASE "Account Type" OF
        "Account Type"::Customer:
          BEGIN
            IF Customer.GET("Account No.") THEN
              EXIT(Customer.Name);
          END;
        "Account Type"::Vendor:
          BEGIN
            IF Vendor.GET("Account No.") THEN
              EXIT(Vendor.Name);
          END;
      END;
      EXIT('');
    END;

    LOCAL PROCEDURE GetAppliesToEntry@6(VAR CVLedgerEntryBuffer@1000 : Record 382);
    BEGIN
      CVLedgerEntryBuffer.INIT;
      IF "Applies-to Entry No." = 0 THEN
        EXIT;

      CASE "Account Type" OF
        "Account Type"::Customer:
          BEGIN
            IF CustLedgerEntry."Entry No." <> "Applies-to Entry No." THEN
              IF CustLedgerEntry.GET("Applies-to Entry No.") THEN
                CustLedgerEntry.CALCFIELDS(Amount,"Remaining Amount")
              ELSE
                CLEAR(CustLedgerEntry);
            CVLedgerEntryBuffer.CopyFromCustLedgEntry(CustLedgerEntry)
          END;
        "Account Type"::Vendor:
          BEGIN
            IF VendLedgerEntry."Entry No." <> "Applies-to Entry No." THEN
              IF VendLedgerEntry.GET("Applies-to Entry No.") THEN
                VendLedgerEntry.CALCFIELDS(Amount,"Remaining Amount")
              ELSE
                CLEAR(VendLedgerEntry);
            CVLedgerEntryBuffer.CopyFromVendLedgEntry(VendLedgerEntry)
          END;
      END;
    END;

    PROCEDURE AppliesToEntryDocumentNo@2() : Code[20];
    VAR
      CVLedgerEntryBuffer@1000 : Record 382;
    BEGIN
      GetAppliesToEntry(CVLedgerEntryBuffer);
      EXIT(CVLedgerEntryBuffer."Document No.");
    END;

    PROCEDURE AppliesToEntryDescription@14() : Text;
    VAR
      CVLedgerEntryBuffer@1000 : Record 382;
    BEGIN
      GetAppliesToEntry(CVLedgerEntryBuffer);
      EXIT(CVLedgerEntryBuffer.Description);
    END;

    PROCEDURE AppliesToEntryPostingDate@15() : Date;
    VAR
      CVLedgerEntryBuffer@1000 : Record 382;
    BEGIN
      GetAppliesToEntry(CVLedgerEntryBuffer);
      EXIT(CVLedgerEntryBuffer."Posting Date");
    END;

    PROCEDURE AppliesToEntryCurrencyCode@16() : Code[10];
    VAR
      CVLedgerEntryBuffer@1000 : Record 382;
    BEGIN
      GetAppliesToEntry(CVLedgerEntryBuffer);
      EXIT(CVLedgerEntryBuffer."Currency Code");
    END;

    PROCEDURE AppliesToEntryAmount@17() : Decimal;
    VAR
      CVLedgerEntryBuffer@1000 : Record 382;
    BEGIN
      GetAppliesToEntry(CVLedgerEntryBuffer);
      EXIT(CVLedgerEntryBuffer.Amount);
    END;

    PROCEDURE AppliesToEntryRemainingAmount@18() : Decimal;
    VAR
      CVLedgerEntryBuffer@1000 : Record 382;
    BEGIN
      GetAppliesToEntry(CVLedgerEntryBuffer);
      EXIT(CVLedgerEntryBuffer."Remaining Amount");
    END;

    BEGIN
    END.
  }
}

