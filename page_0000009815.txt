OBJECT Page 9815 Std. Password Dialog
{
  OBJECT-PROPERTIES
  {
    Date=23/09/13;
    Time=12:00:00;
    Version List=NAVW17.10;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Set Password;
               FRA=D‚finir le mot de passe];
    PageType=StandardDialog;
    OnInit=BEGIN
             EnableBlankPassword := FALSE;
           END;

    OnOpenPage=BEGIN
                 ValidPassword := FALSE;
               END;

    OnQueryClosePage=BEGIN
                       ValidPassword := FALSE;
                       IF CloseAction = ACTION::OK THEN BEGIN
                         IF SetPassword <> ConfirmPassword THEN
                           ERROR(PasswordMismatchErr);
                         IF EnableBlankPasswordState AND (SetPassword = '') THEN BEGIN
                           IF NOT CONFIRM(ConfirmBlankPasswordQst) THEN
                             ERROR(PasswordTooSimpleErr);
                         END ELSE BEGIN
                           IF NOT IdentityManagement.ValidatePasswordStrength(SetPassword) THEN
                             ERROR(PasswordTooSimpleErr);
                         END;
                         ValidPassword := TRUE;
                       END
                     END;

  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 2   ;1   ;Field     ;
                Name=<SetPassword>;
                ExtendedDatatype=Masked;
                CaptionML=[ENU=Password;
                           FRA=Mot de passe];
                SourceExpr=SetPassword;
                OnValidate=BEGIN
                             IF NOT IdentityManagement.ValidatePasswordStrength(SetPassword) THEN
                               ERROR(PasswordTooSimpleErr);
                           END;
                            }

    { 3   ;1   ;Field     ;
                Name=<ConfirmPassword>;
                ExtendedDatatype=Masked;
                CaptionML=[ENU=Confirm Password;
                           FRA=Confirmer mot de passe];
                SourceExpr=ConfirmPassword;
                OnValidate=BEGIN
                             IF SetPassword <> ConfirmPassword THEN
                               ERROR(PasswordMismatchErr);
                           END;
                            }

  }
  CODE
  {
    VAR
      PasswordMismatchErr@1003 : TextConst 'ENU=The specified passwords are not the same.;FRA=Les mots de passe sp‚cifi‚s ne sont pas identiques.';
      PasswordTooSimpleErr@1004 : TextConst 'ENU=The specified password does not meet the requirements. It must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, and one number.;FRA=Le mot de passe sp‚cifi‚ ne r‚pond pas aux exigences. Il doit comporter au moins 8ÿcaractŠres et ˆtre compos‚ d''au moins une lettre majuscule, une minuscule et un chiffre.';
      PasswordNotValidatedErr@1007 : TextConst 'ENU=The password did not validate correctly, or it was not accepted.;FRA=Le mot de passe n''a pas ‚t‚ correctement valid‚ ou n''a pas ‚t‚ accept‚.';
      ConfirmBlankPasswordQst@1008 : TextConst 'ENU=Exit dialog with empty password?;FRA=Quitter la boŒte de dialogue avec un mot de passe videÿ?';
      IdentityManagement@1002 : Codeunit 9801;
      SetPassword@1000 : Text[250] INDATASET;
      ConfirmPassword@1001 : Text[250] INDATASET;
      ValidPassword@1005 : Boolean;
      EnableBlankPasswordState@1006 : Boolean;

    PROCEDURE GetPasswordValue@1() : Text;
    BEGIN
      IF ValidPassword = TRUE THEN
        EXIT(SetPassword);

      ERROR(PasswordNotValidatedErr);
    END;

    PROCEDURE EnableBlankPassword@2(enable@1000 : Boolean);
    BEGIN
      EnableBlankPasswordState := enable;
    END;

    BEGIN
    END.
  }
}

