OBJECT Report 5756 Create Warehouse Location
{
  OBJECT-PROPERTIES
  {
    Date=23/09/13;
    Time=12:00:00;
    Version List=NAVW17.10;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Create Warehouse Location;
               FRA=Cr‚ation entrep“t];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  IF LocCode = '' THEN
                    ERROR(Text001);
                  IF AdjBinCode = '' THEN
                    ERROR(Text002);

                  ItemLedgEntry.RESET;
                  ItemLedgEntry.SETCURRENTKEY("Item No.",Open);
                  IF ItemLedgEntry.FIND('-') THEN
                    REPEAT
                      ItemLedgEntry.SETRANGE("Item No.",ItemLedgEntry."Item No.");
                      ItemLedgEntry.SETRANGE(Open,TRUE);
                      ItemLedgEntry.SETRANGE("Location Code",LocCode);
                      Found := ItemLedgEntry.FIND('-');
                      IF Found AND NOT HideValidationDialog THEN
                        IF NOT CONFIRM(
                             Text010 + Text011 + Text012 + Text013 + Text014 +
                             Text015 + Text016 + Text017,FALSE,Location.TABLECAPTION,LocCode)
                        THEN
                          CurrReport.QUIT;
                      ItemLedgEntry.SETRANGE("Location Code");
                      ItemLedgEntry.SETRANGE(Open);
                      ItemLedgEntry.FIND('+');
                      ItemLedgEntry.SETRANGE("Item No.");
                    UNTIL (ItemLedgEntry.NEXT = 0) OR Found;

                  IF NOT Found THEN
                    ERROR(Text018,Location.TABLECAPTION,Location.FIELDCAPTION(Code),LocCode);
                  CLEAR(ItemLedgEntry);

                  WhseEntry.RESET;
                  WhseEntry.SETCURRENTKEY("Location Code");
                  WhseEntry.SETRANGE("Location Code",LocCode);
                  IF WhseEntry.FINDFIRST THEN
                    ERROR(
                      Text019,Location.TABLECAPTION,LocCode,WhseEntry.TABLECAPTION);

                  TempWhseJnlLine.RESET;
                  TempWhseJnlLine.DELETEALL;

                  LastLineNo := 0;

                  WITH ItemLedgEntry DO BEGIN
                    SETCURRENTKEY(
                      "Item No.","Location Code",Open,"Variant Code","Unit of Measure Code","Lot No.","Serial No.");

                    Location.GET(LocCode);
                    Location.TESTFIELD("Adjustment Bin Code",'');
                    CheckWhseDocs;

                    Bin.GET(LocCode,AdjBinCode);

                    IF FIND('-') THEN BEGIN
                      IF NOT HideValidationDialog THEN BEGIN
                        Window.OPEN(STRSUBSTNO(Text020,FIELDCAPTION("Location Code"),"Location Code") + Text003);
                        i := 1;
                        CountItemLedgEntries := COUNT;
                      END;

                      REPEAT
                        IF NOT HideValidationDialog THEN BEGIN
                          Window.UPDATE(100,i);
                          Window.UPDATE(102,ROUND(i / CountItemLedgEntries * 10000,1));
                        END;

                        SETRANGE("Item No.","Item No.");
                        IF FIND('-') THEN BEGIN
                          SETRANGE("Location Code",LocCode);
                          SETRANGE(Open,TRUE);
                          IF FIND('-') THEN
                            REPEAT
                              SETRANGE("Variant Code","Variant Code");
                              IF FIND('-') THEN
                                REPEAT
                                  SETRANGE("Unit of Measure Code","Unit of Measure Code");
                                  IF FIND('-') THEN
                                    REPEAT
                                      SETRANGE("Lot No.","Lot No.");
                                      IF FIND('-') THEN
                                        REPEAT
                                          SETRANGE("Serial No.","Serial No.");

                                          CALCSUMS("Remaining Quantity");

                                          IF "Remaining Quantity" < 0 THEN
                                            ERROR(
                                              STRSUBSTNO(Text005,BuildErrorText) +
                                              STRSUBSTNO(Text009,CheckNegInv.OBJECTID));

                                          IF "Remaining Quantity" > 0 THEN
                                            CreateWhseJnlLine;
                                          FIND('+');
                                          SETRANGE("Serial No.");
                                        UNTIL NEXT = 0;

                                      FIND('+');
                                      SETRANGE("Lot No.");
                                    UNTIL NEXT = 0;

                                  FIND('+');
                                  SETRANGE("Unit of Measure Code")
                                UNTIL NEXT = 0;

                              FIND('+');
                              SETRANGE("Variant Code");
                            UNTIL NEXT = 0;
                        END;

                        SETRANGE(Open);
                        SETRANGE("Location Code");
                        FIND('+');
                        IF NOT HideValidationDialog THEN
                          i := i + COUNT;
                        SETRANGE("Item No.");
                      UNTIL NEXT = 0;
                    END;
                  END;
                END;

    OnPostReport=BEGIN
                   Location."Bin Mandatory" := TRUE;
                   Location.VALIDATE("Directed Put-away and Pick",TRUE);
                   Location.VALIDATE("Adjustment Bin Code",AdjBinCode);
                   Location.MODIFY;

                   IF TempWhseJnlLine.FIND('-') THEN
                     REPEAT
                       WhseJnlLinePost.RUN(TempWhseJnlLine);
                     UNTIL TempWhseJnlLine.NEXT = 0;

                   IF NOT HideValidationDialog THEN BEGIN
                     Window.CLOSE;
                     MESSAGE(Text004);
                   END;
                 END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             FRA=Options] }

      { 1   ;2   ;Field     ;
                  CaptionML=[ENU=Location Code;
                             FRA=Code magasin];
                  SourceExpr=LocCode;
                  OnValidate=BEGIN
                               Location.GET(LocCode);
                               Location.TESTFIELD("Bin Mandatory",FALSE);
                               Location.TESTFIELD("Use As In-Transit",FALSE);
                               Location.TESTFIELD("Directed Put-away and Pick",FALSE);
                             END;

                  OnLookup=BEGIN
                             CLEAR(Location);
                             IF LocCode <> '' THEN
                               Location.Code := LocCode;
                             IF PAGE.RUNMODAL(0,Location) = ACTION::LookupOK THEN BEGIN
                               Location.TESTFIELD("Bin Mandatory",FALSE);
                               Location.TESTFIELD("Use As In-Transit",FALSE);
                               Location.TESTFIELD("Directed Put-away and Pick",FALSE);
                               LocCode := Location.Code;
                             END;
                           END;
                            }

      { 3   ;2   ;Field     ;
                  CaptionML=[ENU=Adjustment Bin Code;
                             FRA=Code empl. ajustement];
                  SourceExpr=AdjBinCode;
                  OnValidate=BEGIN
                               IF AdjBinCode <> '' THEN
                                 IF LocCode <> '' THEN
                                   Bin.GET(LocCode,AdjBinCode)
                                 ELSE BEGIN
                                   Bin.SETRANGE(Code,AdjBinCode);
                                   Bin.FINDFIRST;
                                   LocCode := Bin."Location Code";
                                 END;
                             END;

                  OnLookup=BEGIN
                             Bin.RESET;
                             IF LocCode <> '' THEN
                               Bin.SETRANGE("Location Code",LocCode);

                             IF PAGE.RUNMODAL(0,Bin) = ACTION::LookupOK THEN BEGIN
                               IF LocCode = '' THEN
                                 LocCode := Bin."Location Code";
                               AdjBinCode := Bin.Code;
                             END;
                           END;
                            }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      TempWhseJnlLine@1007 : TEMPORARY Record 7311;
      Item@1020 : Record 27;
      ItemLedgEntry@1011 : Record 32;
      WhseEntry@1040 : Record 7312;
      ItemUnitOfMeasure@1001 : Record 5404;
      Location@1002 : Record 14;
      Bin@1003 : Record 7354;
      WhseRcptHeader@1028 : Record 7316;
      WhseShipHeader@1027 : Record 7320;
      WhseActivHeader@1026 : Record 5766;
      WhseWkshLine@1025 : Record 7326;
      WhseJnlLinePost@1010 : Codeunit 7301;
      WMSMgt@1019 : Codeunit 7302;
      CheckNegInv@1014 : Report 5757;
      Window@1013 : Dialog;
      LocCode@1000 : Code[10];
      Text001@1042 : TextConst 'ENU=Please enter a location code!;FRA=Veuillez entrer un code Magasin !';
      Text002@1012 : TextConst 'ENU=Please enter an adjustment bin code!;FRA=Veuillez entrer un emplacement d''ajustement !';
      Text003@1004 : TextConst 'ENU=Count #100##### @102@@@@@@@@;FRA=Compte #100##### @102@@@@@@@@';
      AdjBinCode@1009 : Code[20];
      i@1005 : Integer;
      CountItemLedgEntries@1029 : Integer;
      LastLineNo@1008 : Integer;
      Text004@1015 : TextConst 'ENU=Conversion successfully completed!;FRA=Conversion accomplie avec succŠs !';
      Text005@1016 : TextConst 'ENU=Negative inventory was found in the location. You must clear this negative inventory in the program before you can proceed with the conversion!\\%1.\\;FRA=Un inventaire n‚gatif a ‚t‚ trouv‚ dans le magasin. Vous devez enlever cet inventaire n‚gatif du programme avant de poursuivre la conversion!\\%1.\\';
      HideValidationDialog@1018 : Boolean;
      Text006@1022 : TextConst 'ENU=%1 %2 cannot be converted because at least one %3 is not completely posted yet!\\Post or delete all of them before restarting the conversion batch job!;FRA=%1 %2 ne peuvent pas ˆtre convertis parce qu''au moins un %3 n''est pas encore valid‚!\\Validez ou supprimez complŠtement les lignes signal‚es avant de reprendre le traitement de conversion par lot !';
      Text007@1023 : TextConst 'ENU=%1 %2 cannot be converted because at least one %3 is not completely registered yet!\\Register or delete all of them before restarting the conversion batch job!;FRA=%1 %2 ne peuvent pas ˆtre convertis parce qu''au moins un %3 n''est pas entiŠrement enregistr‚!\\Enregistrez ou supprimez complŠtement toutes les lignes avant de reprendre le traitement de conversion par lot !';
      Text008@1024 : TextConst 'ENU=%1 %2 cannot be converted because at least one %3 exists!\\Delete all of them before restarting the conversion batch job!;FRA=%1 %2 ne peuvent pas ˆtre convertis parce qu''au moins un %3 existe!\\Supprimez toutes les lignes avant de reprendre le traitement par lot de conversion !';
      Text009@1030 : TextConst 'ENU=Run %1 for a report of all negative inventory in the location.;FRA=Lancer %1 pour un report de tous les stocks n‚gatifs en magasin.';
      Text010@1039 : TextConst 'ENU=Inventory exists on this location. By clicking Yes from this warning, you are confirming that you want to enable this location to use Warehouse Management Systems by running a batch job to create warehouse entries for the inventory in this location.\\;FRA=Ce magasin contient du stock. En cliquant Oui sur cet avertissement, vous confirmez que vous souhaitez bien g‚rer ce magasin en tant que magasin de distribution avanc‚ en lan‡ant le traitement par lot qui va cr‚er des Saisies d''inventaire Entrep“t pour chaque article en stock.\\';
      Text011@1038 : TextConst 'ENU="If you wish to proceed, you must first ensure that no negative inventory exists in the location. Negative inventory is not allowed in a location that uses warehouse management logic and must be cleared by posting a suitable quantity to inventory. ";FRA="Si vous souhaitez continuer, vous devez d''abord vous assurer qu''aucun stock n‚gatif n''existe dans le magasin car les stocks n‚gatifs ne sont pas autoris‚s dans un magasin qui emploie la logique de gestion d''entrep“t. "';
      Text012@1037 : TextConst 'ENU=You can perform a check for negative inventory by using report Check on Negative Inventory.\\;FRA=Vous pouvez contr“ler les stocks n‚gatifs en lan‡ant le report V‚rification des stocks n‚gatifs. \\';
      Text013@1036 : TextConst 'ENU="If you can confirm that no negative inventory exists in the location, proceed with the conversion batch job. If the program finds negative inventory, it will stop the batch job with an error message. ";FRA="Si vous pouvez confirmer qu''aucun inventaire n‚gatif n''existe en magasin, proc‚dez au traitement par lot de conversion. Si le programme trouve un inventaire n‚gatif, il arrˆtera le traitement par lot avec un message d''erreur. "';
      Text014@1035 : TextConst 'ENU=The result of this batch job is that initial warehouse entries will be created. You must balance these initial warehouse entries on the adjustment bin by posting a warehouse physical inventory journal or a warehouse item journal to assign zones and bins to items.\;FRA=Le r‚sultat de ce traitement par lot est que des entr‚es entrep“t seront cr‚‚es. Vous devez ‚quilibrer ces entr‚es initiales entrep“t sur l''emplacement d''ajustement en validant une feuille inventaire entrep“t ou une feuille article entrep“t pour affecter des zones et des emplacements aux articles.\';
      Text015@1034 : TextConst 'ENU=You must create zones and bins before posting a warehouse physical inventory.\\;FRA=Vous devez cr‚er des zones et des emplacements avant de valider  un inventaire physique entrep“t.\\';
      Text016@1033 : TextConst 'ENU=%1 %2 will be a warehouse management location after the batch job has run successfully! This conversion cannot be reversed or undone after it has run!;FRA=%1 %2 seront  magasin de distribution aprŠs que le traitement par lot ait fonctionn‚ avec succŠs ! Cette conversion ne peut pas ˆtre renvers‚e ou d‚faite aprŠs qu''elle ait fonctionn‚ !';
      Text017@1032 : TextConst 'ENU=\\Do you really want to proceed?;FRA=\\Voulez-vous vraiment continuer?';
      Text018@1031 : TextConst 'ENU=There is nothing to convert for %1 %2 ''%3''.;FRA=Il n''y a rien … convertir pour %1 %2 ''%3 ''.';
      Text019@1041 : TextConst 'ENU=%1 %2 cannot be converted because at least one %3 exists for this %1!;FRA=%1 %2 ne peuvent pas ˆtre convertis parce qu''au moins un %3 existe pour ces %1 !';
      Text020@1006 : TextConst 'ENU=%1 %2 will be converted to a WMS location!\\This might take some time so please be patient!;FRA=%1 %2 seront convertis en magasin WMS !\\Cela peut prendre un certain temps ! Merci de patienter.';
      Found@1017 : Boolean;

    PROCEDURE CheckWhseDocs@5();
    BEGIN
      WhseRcptHeader.SETCURRENTKEY("Location Code");
      WhseRcptHeader.SETRANGE("Location Code",Location.Code);
      IF WhseRcptHeader.FINDFIRST THEN
        ERROR(
          Text006,
          Location.TABLECAPTION,
          Location.Code,
          WhseRcptHeader.TABLECAPTION);

      WhseShipHeader.SETCURRENTKEY("Location Code");
      WhseShipHeader.SETRANGE("Location Code",Location.Code);
      IF WhseShipHeader.FINDFIRST THEN
        ERROR(
          Text006,
          Location.TABLECAPTION,
          Location.Code,
          WhseShipHeader.TABLECAPTION);

      WhseActivHeader.SETCURRENTKEY("Location Code");
      WhseActivHeader.SETRANGE("Location Code",Location.Code);
      IF WhseActivHeader.FINDFIRST THEN
        ERROR(
          Text007,
          Location.TABLECAPTION,
          Location.Code,
          WhseActivHeader.Type);

      WhseWkshLine.SETCURRENTKEY("Item No.","Location Code");
      WhseWkshLine.SETRANGE("Location Code",Location.Code);
      IF WhseWkshLine.FINDFIRST THEN
        ERROR(
          Text008,
          Location.TABLECAPTION,
          Location.Code,
          WhseWkshLine.TABLECAPTION);
    END;

    LOCAL PROCEDURE CreateWhseJnlLine@4();
    BEGIN
      LastLineNo := LastLineNo + 10000;

      WITH ItemLedgEntry DO BEGIN
        TempWhseJnlLine.INIT;
        TempWhseJnlLine."Entry Type" := TempWhseJnlLine."Entry Type"::"Positive Adjmt.";
        TempWhseJnlLine."Line No." := LastLineNo;
        TempWhseJnlLine."Location Code" := "Location Code";
        TempWhseJnlLine."Registering Date" := TODAY;
        TempWhseJnlLine."Item No." := "Item No.";
        TempWhseJnlLine.Quantity := ROUND("Remaining Quantity" / "Qty. per Unit of Measure",0.00001);
        TempWhseJnlLine."Qty. (Base)" := "Remaining Quantity";
        TempWhseJnlLine."Qty. (Absolute)" := ROUND(ABS("Remaining Quantity") / "Qty. per Unit of Measure",0.00001);
        TempWhseJnlLine."Qty. (Absolute, Base)" := ABS("Remaining Quantity");
        TempWhseJnlLine."User ID" := USERID;
        TempWhseJnlLine."Variant Code" := "Variant Code";
        IF "Unit of Measure Code" = '' THEN BEGIN
          Item.GET("Item No.");
          "Unit of Measure Code" := Item."Base Unit of Measure";
        END;
        TempWhseJnlLine."Unit of Measure Code" := "Unit of Measure Code";
        TempWhseJnlLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
        TempWhseJnlLine."Lot No." := "Lot No.";
        TempWhseJnlLine."Serial No." := "Serial No.";
        TempWhseJnlLine.VALIDATE("Zone Code",Bin."Zone Code");
        TempWhseJnlLine."Bin Code" := AdjBinCode;
        TempWhseJnlLine."To Bin Code" := AdjBinCode;
        GetItemUnitOfMeasure("Item No.","Unit of Measure Code");
        TempWhseJnlLine.Cubage :=
          TempWhseJnlLine."Qty. (Absolute)" * ItemUnitOfMeasure.Cubage;
        TempWhseJnlLine.Weight :=
          TempWhseJnlLine."Qty. (Absolute)" * ItemUnitOfMeasure.Weight;

        WMSMgt.CheckWhseJnlLine(TempWhseJnlLine,0,0,FALSE);
        TempWhseJnlLine.INSERT;
      END;
    END;

    LOCAL PROCEDURE GetItemUnitOfMeasure@15(ItemNo@1000 : Code[20];UOMCode@1001 : Code[10]);
    BEGIN
      IF (ItemUnitOfMeasure."Item No." <> ItemNo) OR
         (ItemUnitOfMeasure.Code <> UOMCode)
      THEN
        IF NOT ItemUnitOfMeasure.GET(ItemNo,UOMCode) THEN
          ItemUnitOfMeasure.INIT;
    END;

    LOCAL PROCEDURE BuildErrorText@7() : Text[250];
    VAR
      Text@1000 : Text[250];
    BEGIN
      WITH ItemLedgEntry DO BEGIN
        Text :=
          STRSUBSTNO(
            '%1: %2, %3: %4',
            FIELDCAPTION("Location Code"),"Location Code",
            FIELDCAPTION("Item No."),"Item No.");
        IF "Variant Code" <> '' THEN
          Text :=
            STRSUBSTNO('%1, %2: %3',Text,
              FIELDCAPTION("Variant Code"),"Variant Code");
        IF "Unit of Measure Code" <> '' THEN
          Text :=
            STRSUBSTNO('%1, %2: %3',Text,
              FIELDCAPTION("Unit of Measure Code"),
              "Unit of Measure Code");
        IF "Lot No." <> '' THEN
          Text :=
            STRSUBSTNO('%1, %2: %3',Text,
              FIELDCAPTION("Lot No."),"Lot No.");
        IF "Serial No." <> '' THEN
          Text :=
            STRSUBSTNO('%1, %2: %3',Text,
              FIELDCAPTION("Serial No."),"Serial No.");
      END;
      EXIT(Text);
    END;

    PROCEDURE InitializeRequest@2(LocationCode@1000 : Code[10];AdjustmentBinCode@1001 : Code[20]);
    BEGIN
      LocCode := LocationCode;
      AdjBinCode := AdjustmentBinCode;
    END;

    PROCEDURE SetHideValidationDialog@7380(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

